{"version":3,"sources":["com/app/move.cljs"],"mappings":"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","names":["com.app.move/change","board","pos","type","p1__28439#","logical-pos->assoc-arg","cljs.core.map","cljs.core/inc","cljs.core/reverse","changed","cljs.core/assoc-in","com.app.move/calc-next-candidate-pos","player-pos","direction","vec__28440","cljs.core.nth","player-x","player-y","next","G__28443","cljs.core/Keyword","js/Error","cljs.core/List","com.app.move/get-type-in-pos","vec__28444","pos-x","pos-y","cljs.core.get_in","com.app.move/movable?","cljs.core.not_EQ_","com.app.move/calc-next-pos","candidate-pos","movable","com.app.move/move","first-pos","arrow-history","p1__28447#","p2__28448#","cljs.core.reduce","com.app.move/display","goal-pos","display-player","display-goal","goalin?","cljs.core._EQ_","display-final","com.app.move/calc-next-board-state","board-state","first-map","final-player-pos","result","cljs.core.assoc","com.app.move/calc-next-boards-state","boards-state","p1__28449#","com.app.move/calc-next-game-state","game-state","boards","next-boards"],"sourcesContent":["(ns com.app.move)\r\n\r\n(defn- change [board pos type]\r\n  (let [logical-pos->assoc-arg #(map inc (reverse %))\r\n        changed (assoc-in board (logical-pos->assoc-arg pos) type)]\r\n    changed))\r\n\r\n(defn- calc-next-candidate-pos [player-pos direction]\r\n  (let [[player-x player-y] player-pos\r\n        next (case direction\r\n               :up (list player-x (dec player-y))\r\n               :down (list player-x (inc player-y))\r\n               :right (list (inc player-x) player-y)\r\n               :left (list (dec player-x) player-y))]\r\n    next))\r\n\r\n(defn- get-type-in-pos [board pos]\r\n  (let [[pos-x pos-y] pos]\r\n    (get-in board [(inc pos-y) (inc pos-x)])))\r\n\r\n(defn- movable? [board pos]\r\n  (not= :wall (get-type-in-pos board pos)))\r\n\r\n(defn- calc-next-pos [board player-pos direction]\r\n  (let [candidate-pos (calc-next-candidate-pos player-pos direction)\r\n        movable (movable? board candidate-pos)]\r\n    (if movable candidate-pos player-pos)))\r\n\r\n\r\n(defn- move [board first-pos arrow-history]\r\n  (reduce #(calc-next-pos board %1 %2) first-pos arrow-history))\r\n\r\n(defn- display [board player-pos goal-pos]\r\n  (let [display-player (change board player-pos :player)\r\n        display-goal (change display-player goal-pos :goal)\r\n        goalin? (= player-pos goal-pos)\r\n        display-final (if goalin? (change board player-pos :goalin) display-goal)]\r\n    {:display display-final\r\n     :is_goalin goalin?}))\r\n\r\n\r\n(defn- calc-next-board-state [board-state arrow-history]\r\n  (let [first-map (board-state :first-map)\r\n        first-pos (board-state :first-player-pos)\r\n        goal-pos (board-state :goal-pos)\r\n        final-player-pos (move first-map first-pos arrow-history)\r\n        result (display first-map final-player-pos goal-pos)\r\n        ]\r\n    (-> board-state\r\n        (assoc :display-board (result :display))\r\n        (assoc :is_goalin (result :is_goalin))\r\n        )\r\n  ))\r\n\r\n(defn- calc-next-boards-state [boards-state arrow-history]\r\n  (map #(calc-next-board-state % arrow-history) boards-state))\r\n\r\n(defn calc-next-game-state [game-state arrow-history]\r\n  (let [boards (game-state :boards)\r\n        next-boards (calc-next-boards-state boards arrow-history)]\r\n  (assoc game-state :boards next-boards)))"]}