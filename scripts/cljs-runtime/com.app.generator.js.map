{"version":3,"sources":["com/app/generator.cljs"],"mappings":"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","names":["com.app.generator/blocks","com.app.generator/make-board","width","height","p1__28347#","add-wall-into-line","cljs.core/vec","cljs.core.concat","upper-walls","cljs.core.repeat","inner","iter__4652__auto__","s__28350","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__28352","cljs.core/chunk-buffer","i__28351","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28349","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","_","cljs.core.range","board","block-number","rand-width","cljs.core/rand-int","rand-height","p1__28348#","cljs.core/iterate","cljs.core/assoc-in","cljs.core.nth","com.app.generator/get-item-pos","item","player","n","i","cljs.core/flatten","cljs.core.map","cljs.core/dec","cljs.core/List","cljs.core/mod","cljs.core/quot","com.app.generator/get-player-pos","com.app.generator/get-ingoal-pos","com.app.generator/get-type-in-pos","x","y","cljs.core.get_in","com.app.generator/calc-next-candidate-pos","player-pos","direction","vec__28353","player-x","player-y","next","G__28356","cljs.core/Keyword","js/Error","com.app.generator/move-once-in-no-goal-board","vec__28358","p1__28357#","candiated-x","candiated-y","candiated-pos","present-type-in-candidate-pos","possible?","cljs.core._EQ_","next-pos","logical-pos->assoc-arg","cljs.core/inc","cljs.core/reverse","var_args","G__28364","com.app.generator/create-rand-move","count","bias","cljs.core/rand-nth","com.app.generator.create_rand_move","bias-direction","p1__28361#","rand-move","first-moves","sec-moves","p1__28362#","cljs.core.println","com.app.generator/calc-one-board","first-status-board","arrow-history","p1__28365#","p2__28366#","cljs.core.reduce","com.app.generator/init-boards","answer","board-config","cljs.core.mapv","config","p1__28367#","first-board","first-player-pos","goal-pos","goal-is-same-with-first-player","com.app.generator/test-maps","cljs.core/chunk-first"],"sourcesContent":["(ns com.app.generator)\r\n\r\n(def blocks [:wall :empty :player :goal :goalin])\r\n\r\n\r\n(defn make-board [width height]\r\n  (let [add-wall-into-line\r\n        #(vec (concat [:wall] % [:wall]))\r\n\r\n        upper-walls\r\n        (vec (repeat (+ 2 width) :wall))\r\n\r\n        inner\r\n        (vec (for [_ (range height)]\r\n               (add-wall-into-line  (repeat width :empty) )))\r\n\r\n        board\r\n        (vec (concat [upper-walls] inner [upper-walls]))\r\n\r\n        block-number\r\n        (int (* width height 0.2))\r\n\r\n        rand-width\r\n        #(inc (rand-int width))\r\n\r\n        rand-height\r\n        #(inc (rand-int height))]\r\n\r\n    (->\r\n      (iterate #(assoc-in % [(rand-height) (rand-width)] :wall)  board)\r\n      (nth block-number board)\r\n      (assoc-in  [(rand-height) (rand-width)]  :player))))\r\n\r\n(defn- get-item-pos [item board]\r\n  \"\ubcf4\ub4dc\uc5d0\uc11c \uc720\uc800 \uc704\uce58 \ucc3e\uc74c\"\r\n  (let [player item\r\n\r\n        n (count (first board))\r\n\r\n        i (.indexOf (flatten board) player)]\r\n\r\n    (if (pos? i)\r\n      (map dec (list (mod i n) (quot i n))))))\r\n\r\n(defn- get-player-pos [board] (get-item-pos :player board))\r\n(defn- get-ingoal-pos [board] (get-item-pos :goalin board))\r\n\r\n(defn- get-type-in-pos [board x y]\r\n  \"\ubcf4\ub4dc\uc758 x y pos \uc758 \uac12\uc744 \ucc3e\uc74c\"\r\n  (get-in board [(inc y) (inc x)]))\r\n\r\n(defn calc-next-candidate-pos [player-pos direction]\r\n  (let [[player-x player-y] player-pos\r\n        next (case direction\r\n               :up (list player-x (dec player-y))\r\n               :down (list player-x (inc player-y))\r\n               :right (list (inc player-x) player-y)\r\n               :left (list (dec player-x) player-y))]\r\n    next))\r\n\r\n(defn- move-once-in-no-goal-board [board direction]\r\n  \"goal \uc704\uce58 \uacc4\uc0b0\uc744 \uc704\ud55c \ud568\uc218\uc774\ubbc0\ub85c, \uc2e4\uc81c \ubcf4\ub4dc\uac00 \uc0dd\uc131\ub41c \uc774\ud6c4\uc5d0\ub294 \uc0ac\uc6a9 X\"\r\n  (let [player-pos\r\n        (get-player-pos board)\r\n\r\n        [candiated-x candiated-y :as candiated-pos]\r\n        (calc-next-candidate-pos player-pos direction)\r\n\r\n        present-type-in-candidate-pos (get-type-in-pos board candiated-x candiated-y)\r\n\r\n        possible? ( = :empty present-type-in-candidate-pos)\r\n\r\n        next-pos (if possible?  candiated-pos player-pos )\r\n\r\n        logical-pos->assoc-arg #(map inc (reverse %))\r\n        ]\r\n    (-> board\r\n        (assoc-in (logical-pos->assoc-arg player-pos) :empty)\r\n        (assoc-in (logical-pos->assoc-arg next-pos) :player))))\r\n\r\n\r\n(defn- create-rand-move\r\n  ([count]\r\n   (let [bias (rand-nth [:up :down :right :left])]\r\n     (create-rand-move count bias))\r\n   )\r\n  ([count bias-direction]\r\n   (let [rand-move #(map (fn [_] (rand-nth [:up :down :right :left])) (range %))\r\n         first-moves (rand-move count)\r\n         sec-moves (map #(if (= bias-direction %) % (rand-nth [:up :down :right :left])) first-moves)\r\n         _ (println sec-moves)]\r\n     sec-moves)))\r\n\r\n\r\n(defn calc-one-board [first-status-board arrow-history]\r\n  (reduce #(move-once-in-no-goal-board %1 %2) first-status-board arrow-history))\r\n\r\n\r\n(defn init-boards [answer board-config]\r\n  (let [answer (create-rand-move answer)]\r\n    {:boards (mapv (fn [config]\r\n                     (let [width (config :width)\r\n                           height (config :height)\r\n                           first-board (make-board width height)\r\n                           first-player-pos (get-player-pos first-board)\r\n                           goal-pos (get-player-pos (calc-one-board first-board answer))\r\n                           logical-pos->assoc-arg #(map inc (reverse %))\r\n                           goal-is-same-with-first-player (= goal-pos first-player-pos)\r\n                           board (assoc-in first-board (logical-pos->assoc-arg goal-pos) (if goal-is-same-with-first-player :goalin :goal))]\r\n                       {:first-map  (assoc-in first-board (logical-pos->assoc-arg first-player-pos)  :empty)\r\n                        :goal-pos goal-pos\r\n                        :first-player-pos  first-player-pos\r\n                        :display-board board\r\n                        :is_goalin goal-is-same-with-first-player})) board-config)\r\n     :answer answer}))\r\n\r\n; goal \uc5c6\ub294 first-board \uc640 goal \uc704\uce58\ub9cc \uae30\uc5b5\ud588\ub2e4\uac00, \ub85c\uc9c1 \ub3cc\ub9ac\uace0, \ub098\uc911\uc5d0 goal \uc704\uce58\ub791 \ube44\uad50\ud558\ub294\uac8c \uc88b\uc744\ub4ef\r\n\r\n(def test-maps (init-boards 15 [{:width 5 :height 5}\r\n                                {:width 5 :height 5}\r\n                                {:width 5 :height 5}\r\n                                {:width 5 :height 5}\r\n                                {:width 5 :height 5}\r\n                                {:width 5 :height 5}\r\n                                {:width 5 :height 5}\r\n                                ]))\r\n"]}